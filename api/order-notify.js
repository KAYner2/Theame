// api/order-notify.js ‚Äî ESM, Vercel
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST –æ—Ç Supabase-—Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏ —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (—Ñ–æ—Ä–º–∞—Ç ‚Äî "–∫–∞—Å—Å–æ–≤—ã–π —á–µ–∫")
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ (—Ç–µ–º) –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö —á–µ—Ä–µ–∑ env TELEGRAM_TOPIC_ID

const TG_TOKEN       = process.env.TG_BOT_TOKEN || '';
const TG_CHAT_IDS    = (process.env.TELEGRAM_CHAT_ID || '').split(',').map(s=>s.trim()).filter(Boolean);
const WEBHOOK_TOKEN  = process.env.SUPABASE_WEBHOOK_TOKEN || '';   // —Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ SQL-—Ñ—É–Ω–∫—Ü–∏–∏
const IDEMP_TTL_SEC  = Number(process.env.IDEMPOTENCY_TTL_SEC || 60*60*24*14); // 14 –¥–Ω–µ–π

// --- KV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) + in-memory fallback ---
async function getKV() {
  try {
    if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {
      const { kv } = await import('@vercel/kv');
      return kv;
    }
  } catch {}
  return null;
}
const mem = new Map();
function memSetNX(key, ttlSec) {
  const now = Date.now();
  const until = mem.get(key);
  if (until && until > now) return false;
  mem.set(key, now + ttlSec*1000);
  return true;
}
async function idemOnce(key) {
  const kv = await getKV();
  if (kv) {
    const ok = await kv.set(key, '1', { ex: IDEMP_TTL_SEC, nx: true });
    return ok === 'OK';
  }
  return memSetNX(key, IDEMP_TTL_SEC);
}

// --- utils ---
async function readBody(req) {
  if (req.body && typeof req.body === 'object') return req.body;
  const chunks = [];
  for await (const c of req) chunks.push(c);
  const raw = Buffer.concat(chunks).toString('utf8');
  try { return raw ? JSON.parse(raw) : {}; } catch { return {}; }
}

// sendTG —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π message_thread_id (—Ç–æ–ø–∏–∫ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã)
async function sendTG(text) {
  if (!TG_TOKEN || TG_CHAT_IDS.length === 0) return;
  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;

  // TELEGRAM_TOPIC_ID = message_thread_id –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äú–ó–∞–∫–∞–∑—ã —Å–∞–π—Ç‚Äù)
  const threadEnv = process.env.TELEGRAM_TOPIC_ID || process.env.TELEGRAM_THREAD_ID || '';
  const topicId = Number(threadEnv);
  const withThread = Number.isFinite(topicId) && topicId > 0;

  for (const chat_id of TG_CHAT_IDS) {
    try {
      const payload = {
        chat_id,
        text,
        disable_web_page_preview: true,
      };
      if (withThread) payload.message_thread_id = topicId;

      const ac = new AbortController();
      const t = setTimeout(() => ac.abort('timeout'), 8000);
      let r = await fetch(url, {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify(payload),
        signal: ac.signal,
      });
      clearTimeout(t);

      if (!r.ok) {
        // –æ–¥–∏–Ω –ø–æ–≤—Ç–æ—Ä
        const ac2 = new AbortController();
        const t2 = setTimeout(() => ac2.abort('timeout'), 8000);
        await fetch(url, {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify(payload),
          signal: ac2.signal,
        }).catch(()=>{});
        clearTimeout(t2);
      }
    } catch {}
  }
}

function fmtRub(n = 0) {
  return Number(n || 0).toLocaleString('ru-RU', { minimumFractionDigits: 0 });
}

// ‚Äî ¬´–ö–∞—Å—Å–æ–≤—ã–π —á–µ–∫¬ª ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
function formatOrderMessage(order, event) {
  const line = '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';

  const id            = order.id ?? '‚Äî';
  const total         = fmtRub(order.total_amount ?? order.amount_total ?? order.amount ?? 0);
  const payMethodMap  = { card: '–ö–∞—Ä—Ç–∞', sbp: '–°–ë–ü', cash: '–ù–∞–ª–∏—á–Ω—ã–µ' };
  const payMethod     = payMethodMap[order.payment_method] || order.payment_method || '‚Äî';
  const deliveryMap   = { delivery: '–î–æ—Å—Ç–∞–≤–∫–∞', pickup: '–°–∞–º–æ–≤—ã–≤–æ–∑', clarify: '–£—Ç–æ—á–Ω–∏—Ç—å' };
  const delivery      = deliveryMap[order.delivery_type] || order.delivery_type || '‚Äî';

  // –°–æ—Å—Ç–∞–≤ –∫–æ—Ä–∑–∏–Ω—ã (–æ–∂–∏–¥–∞–µ–º order.items ‚Äî –º–∞—Å—Å–∏–≤)
  const items = Array.isArray(order.items) ? order.items : [];
  const itemsText = items.map(it => {
    const name = String(it?.name ?? it?.Name ?? '').trim();
    const qty  = Number(it?.cartQuantity ?? it?.quantity ?? 1);
    const price = fmtRub(it?.price ?? it?.Price ?? 0);
    const sum   = fmtRub((it?.price ?? it?.Price ?? 0) * qty);
    return `‚Ä¢ ${name} √ó${qty} ‚Äî ${sum} ‚ÇΩ (${price} ‚ÇΩ/—à—Ç)`;
  }).join('\n');

  // –ê–¥—Ä–µ—Å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
  let addrBlock = '';
  if (order.delivery_type === 'delivery') {
    const parts = [order.recipient_address, order.district].filter(Boolean);
    if (parts.length) addrBlock = `\nüìç –ê–¥—Ä–µ—Å: ${parts.join(', ')}`;
  }

  const when = [order.delivery_date, order.delivery_time].filter(Boolean).join(' ');
  const whenLine = when ? `\nüïí –ö–æ–≥–¥–∞: ${when}` : '';

  const recipient = (order.recipient_name || order.recipient_phone)
    ? `\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${order.recipient_name || '‚Äî'}${order.recipient_phone ? ` (${order.recipient_phone})` : ''}`
    : '';

  const customer = (order.customer_name || order.customer_phone)
    ? `\nüìû –ó–∞–∫–∞–∑—á–∏–∫: ${order.customer_name || '‚Äî'}${order.customer_phone ? ` (${order.customer_phone})` : ''}`
    : '';

  const promo = order.promo_code
    ? `\nüîë –ü—Ä–æ–º–æ–∫–æ–¥: ${order.promo_code}${order.discount_amount ? ` (‚àí${fmtRub(order.discount_amount)} ‚ÇΩ)` : ''}`
    : '';

  const statusLine = order.payment_status || order.status ? `\nüè∑ –°—Ç–∞—Ç—É—Å: ${order.payment_status || order.status}` : '';

  return (
`üßæ –ó–∞–∫–∞–∑ #${id} ‚Äî ${event}
${line}
üí∞ –°—É–º–º–∞: ${total} ‚ÇΩ
üí≥ –û–ø–ª–∞—Ç–∞: ${payMethod}
üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: ${delivery}${addrBlock}${whenLine}${recipient}${customer}${promo}${statusLine}
${itemsText ? `\nüéÅ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${itemsText}` : ''}
${line}`
  );
}

// --- handler ---
export default async function handler(req, res) {
  try {
    if (req.method === 'GET') {
      await sendTG(`‚úÖ –¢–µ—Å—Ç order-notify —Å ${req.headers.host}`);
      return res.status(200).json({ ok: true, mode: 'GET' });
    }
    if (req.method !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç Supabase-—Ç—Ä–∏–≥–≥–µ—Ä–∞ (Bearer <token>)
    const auth = String(req.headers.authorization || '');
    const token = auth.startsWith('Bearer ') ? auth.slice(7) : '';
    if (!WEBHOOK_TOKEN || token !== WEBHOOK_TOKEN) {
      return res.status(200).send('IGNORED_BAD_TOKEN'); // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, –Ω–æ –∏–≥–Ω–æ—Ä–∏–º
    }

    const body = await readBody(req);
    const event = String(body?.event || 'order.unknown');
    const order = body?.order || null;
    if (!order || !order.id) {
      return res.status(200).send('IGNORED_NO_ORDER');
    }

    // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:
    // - INSERT: 1 —Ä–∞–∑ –Ω–∞ order.id
    // - UPDATE: 1 —Ä–∞–∑ –Ω–∞ (order.id + –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å)
    let idemKey = '';
    if (event === 'order.insert') {
      idemKey = `order:${order.id}`;
    } else if (event === 'order.update') {
      const st = String(order.payment_status || order.status || 'nostatus').toLowerCase();
      idemKey = `order:${order.id}:${st}`;
    } else {
      idemKey = `order:${order.id}:evt:${event}`;
    }

    const first = await idemOnce(idemKey);
    if (!first) return res.status(200).send('OK_DUP');

    const text = formatOrderMessage(order, event);
    await sendTG(text);

    return res.status(200).send('OK');
  } catch (e) {
    console.error('[order-notify] error', e);
    return res.status(200).send('HANDLED');
  }
}

export const config = { api: { bodyParser: true } };
