// tinkoff-callback.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Tinkoff –¥–ª—è Vercel/Express.
//
// –î–µ–ª–∞–µ—Ç:
// 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 200 –û–ö –≤—Å–µ–≥–¥–∞ (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª).
// 2) –í TG —à–ª—ë—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ Status === 'CONFIRMED'.
// 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç Token –ø–æ TINKOFF_TERMINAL_PASSWORD.
// 4) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ PaymentId –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
// 5) –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Receipt.Items (–µ—Å–ª–∏ –µ—Å—Ç—å).

const crypto = require('crypto');

// –ù–∞ Node 18+ fetch –≥–ª–æ–±–∞–ª—å–Ω—ã–π. –ï—Å–ª–∏ —É —Ç–µ–±—è <18 ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
// const fetch = require('node-fetch');

const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TINKOFF_PASSWORD = process.env.TINKOFF_TERMINAL_PASSWORD;

const processed = new Set();

// ---- utils ----
function computeTinkoffToken(body, password) {
  // Tinkoff: —É–¥–∞–ª–∏—Ç—å Token, –¥–æ–±–∞–≤–∏—Ç—å Password, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏, —Å–∫–ª–µ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è, SHA256, upper
  const data = { ...body };
  delete data.Token;
  data.Password = password;

  const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));
  const concatenated = keys
    .map((k) => {
      const v = data[k];
      // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–ª–µ—Ç–∏—Ç –æ–±—ä–µ–∫—Ç ‚Äî —Å–≤–µ–¥—ë–º –∫ —Å—Ç—Ä–æ–∫–µ.
      return v == null
        ? ''
        : typeof v === 'object'
        ? JSON.stringify(v)
        : String(v);
    })
    .join('');

  const hash = crypto.createHash('sha256').update(concatenated).digest('hex');
  return hash.toUpperCase();
}

function escapeMd(s) {
  // Telegram MarkdownV2-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  return String(s).replace(/([_*[\]()~>#+\-=|{}.!\\])/g, '\\$1');
}

async function sendTelegram(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ TG');
    return { ok: false, reason: 'no-telegram-env' };
  }
  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;

  try {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        chat_id: TG_CHAT_ID,
        text,
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      }),
    });

    if (!res.ok) {
      const body = await res.text().catch(() => '');
      const msg = `TG sendMessage failed: ${res.status} ${res.statusText} ${body}`;
      console.error(msg);
      return { ok: false, reason: msg };
    }
    return { ok: true };
  } catch (e) {
    console.error('TG fetch error:', e);
    return { ok: false, reason: 'fetch-error' };
  }
}

/**
 * –î–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ç–µ–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 * –ò—â–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π:
 * - body.Receipt.Items (–∫–ª–∞—Å—Å–∏–∫–∞ Tinkoff)
 * - body.Items (–∏–Ω–æ–≥–¥–∞ –∫–ª–∞–¥—É—Ç —Å—é–¥–∞)
 * - body.DATA?.Receipt?.Items (–µ—Å–ª–∏ –æ–±—ë—Ä–Ω—É—Ç–æ)
 */
function extractItems(body) {
  const items =
    body?.Receipt?.Items ||
    body?.Items ||
    body?.DATA?.Receipt?.Items ||
    [];
  if (!Array.isArray(items)) return [];

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º: { Name, Price, Quantity, Amount }
  return items
    .map((it) => ({
      Name: String(it?.Name ?? '').trim(),
      Price: Number(it?.Price ?? 0), // –∫–æ–ø–µ–π–∫–∏
      Quantity: Number(it?.Quantity ?? 1),
      Amount: Number(it?.Amount ?? 0), // –∫–æ–ø–µ–π–∫–∏
    }))
    .filter((it) => it.Name.length > 0);
}

/** –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ (–∫–æ–ø–µ–π–∫–∏ ‚Üí —Ä—É–±–ª–∏) */
function buildItemsText(items) {
  if (!items.length) return '';

  const lines = items.map((it) => {
    const priceRub = (it.Price || 0) / 100;
    const amountRub = (it.Amount || 0) / 100;
    return `‚Ä¢ ${escapeMd(it.Name)} √ó${it.Quantity} ‚Äî *${amountRub.toFixed(2)} ‚ÇΩ* (${priceRub.toFixed(2)} ‚ÇΩ/—à—Ç)`;
  });

  const total = items.reduce((acc, it) => acc + (Number(it.Amount) || 0), 0) / 100;

  return (
    `\nüßæ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n` +
    lines.join('\n') +
    `\n\n*–ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:* ${total.toFixed(2)} ‚ÇΩ`
  );
}

// ---- handler ----
module.exports = async function tinkoffCallback(req, res) {
  try {
    if (req.method && req.method.toUpperCase() !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    // –ï—Å–ª–∏ body —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –º–∏–¥–¥–ª–≤–∞—Ä—ã ‚Äî –±–µ—Ä—ë–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ
    const body =
      (req.body && Object.keys(req.body).length ? req.body : null) ||
      (await (async () => {
        try {
          return JSON.parse(req.rawBody?.toString?.() || '{}');
        } catch {
          return {};
        }
      })());

    console.log('‚ö° Tinkoff webhook:', JSON.stringify(body));

    // --- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Token ---
    if (TINKOFF_PASSWORD && body && typeof body === 'object') {
      const expected = computeTinkoffToken(body, TINKOFF_PASSWORD);
      const got = (body.Token || '').toString().toUpperCase();
      if (!got || got !== expected) {
        console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Token –æ—Ç Tinkoff. –û–∂–∏–¥–∞–ª–∏:', expected, '–ü–æ–ª—É—á–∏–ª–∏:', got);
        // –í—Å–µ–≥–¥–∞ 200 ‚Äî –Ω–æ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏
        return res.status(200).json({ ok: true, ignored: true, reason: 'bad-token' });
      }
    }

    const status = body?.Status || '';
    const paymentId = body?.PaymentId || body?.OrderId || '';

    // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if (paymentId && processed.has(paymentId)) {
      console.log('‚Ü©Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ:', paymentId);
      return res.status(200).json({ ok: true, duplicate: true });
    }

    // –ò–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ç–æ–ª—å–∫–æ CONFIRMED
    if (status !== 'CONFIRMED') {
      console.log(`‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å: ${status}`);
      return res.status(200).json({ ok: true, ignored: true, status });
    }

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    const amountRub = (Number(body?.Amount) || 0) / 100; // Tinkoff —à–ª—ë—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    const customer =
      body?.CustomerKey ||
      body?.Phone ||
      body?.Email ||
      '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const orderId = body?.OrderId || '‚Äî';

    // –ü–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞
    const items = extractItems(body);
    const itemsText = buildItemsText(items);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const text =
      `üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n` +
      `üì¶ –ó–∞–∫–∞–∑: *${escapeMd(orderId)}*\n` +
      `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${escapeMd(customer)}\n` +
      `üí∞ –°—É–º–º–∞: *${amountRub.toFixed(2)} ‚ÇΩ*` +
      (paymentId ? `\nüÜî PaymentId: ${escapeMd(String(paymentId))}` : '') +
      `\nüïí ${escapeMd(new Date().toLocaleString('ru-RU'))}` +
      (itemsText || '');

    const tg = await sendTelegram(text);
    if (!tg.ok) {
      // –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ 200 –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–¥–∞—ë–º (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª)
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ TG:', tg.reason);
    }

    if (paymentId) processed.add(paymentId);

    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('tinkoff-callback error:', e);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return res.status(200).json({ ok: true, error: 'internal-handled' });
  }
};
