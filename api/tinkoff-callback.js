// tinkoff-callback.js
// –°–µ—Ä–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Tinkoff –¥–ª—è Vercel/Express.
// –§–∏–∫—Å—ã:
// 1) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Status === 'CONFIRMED'
// 2) –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º 200 OK (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª)
// 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Token, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω TINKOFF_TERMINAL_PASSWORD
// 4) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ PaymentId (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∂–∏–≤–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞)

/* eslint-disable no-console */
const crypto = require('crypto');

// ==== –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ env ====
const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;         // –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;         // –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
const TINKOFF_PASSWORD = process.env.TINKOFF_TERMINAL_PASSWORD; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Token

// –ø—Ä–æ—Å—Ç–∞—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞)
const processed = new Set();

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Token Tinkoff:
 * - –ë–µ—Ä—ë–º –≤—Å–µ –ø–æ–ª—è body, –∫—Ä–æ–º–µ 'Token'
 * - –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ Password = TINKOFF_TERMINAL_PASSWORD
 * - –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
 * - –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
 * - SHA256 –ø–æ —Å—Ç—Ä–æ–∫–µ, hex –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
 */
function computeTinkoffToken(body, password) {
  const data = { ...body };
  delete data.Token;
  data.Password = password;

  const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));
  const concatenated = keys.map((k) => (data[k] ?? '')).join('');
  const hash = crypto.createHash('sha256').update(concatenated).digest('hex');
  return hash.toUpperCase();
}

async function sendTelegram(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ TG');
    return { ok: false, reason: 'no-telegram-env' };
  }
  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
  const res = await fetch(url, {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({
      chat_id: TG_CHAT_ID,
      text,
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
    }),
  }).catch((e) => ({ ok: false, error: e?.message || 'fetch-error' }));

  if (!res || !res.ok) {
    const msg = `TG sendMessage failed: ${res?.status} ${res?.statusText}`;
    console.error(msg);
    return { ok: false, reason: msg };
  }
  return { ok: true };
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (Express / Vercel)
module.exports = async function tinkoffCallback(req, res) {
  try {
    if (req.method && req.method.toUpperCase() !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    // –í Vercel/Express body —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω (–µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –ø–∞—Ä—Å–µ—Ä json).
    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º fallback.
    const body = req.body && Object.keys(req.body).length ? req.body : await (async () => {
      try {
        return JSON.parse(req.rawBody?.toString?.() || '{}');
      } catch {
        return {};
      }
    })();

    // –õ–û–ì –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—É–±–µ—Ä–∏ –≤ –ø—Ä–æ–¥–µ)
    console.log('‚ö° Tinkoff webhook:', JSON.stringify(body));

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ ‚Äî –∏–Ω–∞—á–µ Tinkoff –±—É–¥–µ—Ç —Ä–µ—Ç—Ä–∞–∏—Ç—å
    // –ù–æ —à–ª—ë–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–π –Ω–∏–∂–µ
    // (–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π res.json –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ return)

    // --- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Token ---
    if (TINKOFF_PASSWORD && body && typeof body === 'object') {
      const expected = computeTinkoffToken(body, TINKOFF_PASSWORD);
      const got = (body.Token || '').toString().toUpperCase();
      if (!got || got !== expected) {
        console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Token –æ—Ç Tinkoff. –û–∂–∏–¥–∞–ª–∏:', expected, '–ü–æ–ª—É—á–∏–ª–∏:', got);
        // –û—Ç–≤–µ—á–∞–µ–º 200, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –∏ –º—ã –Ω–µ —Å–ø–∞–º–∏–ª–∏ TG)
        return res.status(200).json({ ok: true, ignored: true, reason: 'bad-token' });
      }
    }

    const status = body?.Status || '';
    const paymentId = body?.PaymentId || body?.OrderId || '';

    // --- –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ PaymentId (–∏–ª–∏ OrderId) ---
    if (paymentId && processed.has(paymentId)) {
      console.log('‚Ü©Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ:', paymentId);
      return res.status(200).json({ ok: true, duplicate: true });
    }

    // --- —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã: –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ CONFIRMED ---
    if (status !== 'CONFIRMED') {
      console.log(`‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å: ${status}`);
      return res.status(200).json({ ok: true, ignored: true, status });
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è TG
    const amountRub = (Number(body?.Amount) || 0) / 100; // —É Tinkoff —Å—É–º–º–∞ –æ–±—ã—á–Ω–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    const customer = body?.CustomerKey || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const orderId = body?.OrderId || '‚Äî';

    const text =
      `üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n` +
      `üì¶ –ó–∞–∫–∞–∑: *${orderId}*\n` +
      `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}\n` +
      `üí∞ –°—É–º–º–∞: *${amountRub.toFixed(2)} ‚ÇΩ*\n` +
      `üÜî PaymentId: ${body?.PaymentId || '‚Äî'}\n` +
      `üïí ${new Date().toLocaleString('ru-RU')}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ TG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    await sendTelegram(text);

    if (paymentId) processed.add(paymentId);

    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('tinkoff-callback error:', e);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Tinkoff –Ω–µ –¥–æ–ª–±–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏
    return res.status(200).json({ ok: true, error: 'internal-handled' });
  }
};
