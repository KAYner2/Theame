// api/tinkoff-callback.js
// Tinkoff -> Telegram, –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ.
// ‚öôÔ∏è –¢—Ä–µ–±—É—é—Ç—Å—è env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Vercel:
//   TG_BOT_TOKEN       (–µ—Å—Ç—å —É —Ç–µ–±—è —É–∂–µ)
//   TELEGRAM_CHAT_ID   (–ø–æ—Å—Ç–∞–≤—å 624995887)
//
// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
// - GET  /api/tinkoff-callback     ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç –≤ TG (–ø—Ä–æ–≤–µ—Ä–∫–∞)
// - POST /api/tinkoff-callback     ‚Üí –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ–±—Ö—É–∫ –∏ —à–ª—ë—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –≤ TG
//
// –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –±–µ–∑ Markdown, –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç. –í—Å–µ–≥–¥–∞ 200 OK (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª).

const TG_TOKEN   = process.env.TG_BOT_TOKEN;
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –ù–∞ Vercel (Node 18+) fetch –≥–ª–æ–±–∞–ª—å–Ω—ã–π.
const rub = (kop = 0) => (Number(kop) / 100).toFixed(2);

// –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å JSON –¥–∞–∂–µ –µ—Å–ª–∏ bodyParser –≤—ã–∫–ª—é—á–µ–Ω
function pickBody(req) {
  if (req.body && Object.keys(req.body).length) return req.body;
  try {
    const raw = req.rawBody?.toString?.() || '';
    return raw ? JSON.parse(raw) : {};
  } catch {
    return {};
  }
}

// –í—ã—Ç–∞—â–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –∏ –ø—Ä.) –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
function getItems(body) {
  const items = body?.Receipt?.Items || body?.Items || body?.DATA?.Receipt?.Items || [];
  return Array.isArray(items) ? items : [];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–±–µ–∑ parse_mode, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å)
async function sendTG(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.error('‚ùå TG_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
    return { ok: false, reason: 'no-env' };
  }
  try {
    const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        chat_id: TG_CHAT_ID,
        text,
        disable_web_page_preview: true,
      }),
    });
    const body = await r.text().catch(() => '');
    if (!r.ok) {
      console.error('TG sendMessage failed:', r.status, r.statusText, body);
      return { ok: false, reason: body || `${r.status} ${r.statusText}` };
    }
    return { ok: true };
  } catch (e) {
    console.error('TG fetch error:', e);
    return { ok: false, reason: String(e) };
  }
}

module.exports = async function handler(req, res) {
  try {
    if (req.method === 'GET') {
      const now = new Date().toLocaleString('ru-RU');
      await sendTG(`‚úÖ –¢–µ—Å—Ç –∏–∑ Vercel\n–í—Ä–µ–º—è: ${now}`);
      return res.status(200).send('OK: —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }

    if (req.method !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    const body = pickBody(req);

    // –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    const status    = body?.Status || '‚Äî';
    const orderId   = body?.OrderId || body?.PaymentId || '‚Äî';
    const amountRub = rub(body?.Amount || 0);
    const customer  = body?.CustomerKey || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    // –ü–æ–∑–∏—Ü–∏–∏ –∏ "–Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞"
    const items = getItems(body);
    const firstName = items[0]?.Name ? String(items[0].Name) : '';
    const itemsLines = items.map(it => {
      const name  = String(it?.Name ?? '').trim();
      const qty   = Number(it?.Quantity ?? 1);
      const price = rub(it?.Price ?? 0);
      const amt   = rub(it?.Amount ?? 0);
      return `‚Ä¢ ${name} √ó${qty} ‚Äî ${amt} ‚ÇΩ (${price} ‚ÇΩ/—à—Ç)`;
    }).join('\n');

    // –ß—É—Ç—å-—á—É—Ç—å —Ç–µ—Ö–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–±–∞–≥–∞ (—É—Å–µ—á—ë–Ω–Ω–æ)
    const debugShort = JSON.stringify(body).slice(0, 1500);

    const text =
`üí≥ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ Tinkoff

–°—Ç–∞—Ç—É—Å: ${status}
–ó–∞–∫–∞–∑: ${orderId}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}
–°—É–º–º–∞: ${amountRub} ‚ÇΩ${firstName ? `

–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: ${firstName}` : ''}${itemsLines ? `

–ü–æ–∑–∏—Ü–∏–∏:
${itemsLines}` : ''}

‚Äî ‚Äî
–¢–µ—Ö.–¥–∞–Ω–Ω—ã–µ (—É—Å–µ—á–µ–Ω–æ):
${debugShort}`;

    await sendTG(text);

    // –í—Å–µ–≥–¥–∞ 200 OK ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –æ—Ç Tinkoff
    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('webhook error:', e);
    // –í—Å—ë —Ä–∞–≤–Ω–æ 200, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return res.status(200).json({ ok: true, error: 'handled' });
  }
};

// –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ "—Å—ã—Ä–æ–º—É" —Ç–µ–ª—É –Ω–∞ Vercel
module.exports.config = { api: { bodyParser: false } };