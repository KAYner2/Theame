// tinkoff-callback.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Tinkoff –¥–ª—è Vercel/Express.
//
// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
// 1) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Status === 'CONFIRMED'
// 2) –û—Ç–≤–µ—á–∞–µ–º 200 OK –≤—Å–µ–≥–¥–∞ (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª), –Ω–æ –≤ TG —à–ª—ë–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ CONFIRMED
// 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Token –ø–æ TINKOFF_TERMINAL_PASSWORD
// 4) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ PaymentId (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∂–∏–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
// 5) –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Receipt.Items (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ)

const crypto = require('crypto');

const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TINKOFF_PASSWORD = process.env.TINKOFF_TERMINAL_PASSWORD;

// –ü—Ä–æ—Å—Ç–∞—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
const processed = new Set();

// ---- utils ----
function computeTinkoffToken(body, password) {
  const data = { ...body };
  delete data.Token;
  data.Password = password;

  const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));
  const concatenated = keys.map((k) => (data[k] ?? '')).join('');
  const hash = crypto.createHash('sha256').update(concatenated).digest('hex');
  return hash.toUpperCase();
}

async function sendTelegram(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ TG');
    return { ok: false, reason: 'no-telegram-env' };
  }
  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
  try {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        chat_id: TG_CHAT_ID,
        text,
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      }),
    });
    if (!res.ok) {
      const msg = `TG sendMessage failed: ${res.status} ${res.statusText}`;
      console.error(msg);
      return { ok: false, reason: msg };
    }
    return { ok: true };
  } catch (e) {
    console.error('TG fetch error:', e);
    return { ok: false, reason: 'fetch-error' };
  }
}

/**
 * –î–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ç–µ–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 * –ò—â–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π:
 * - body.Receipt.Items (–∫–ª–∞—Å—Å–∏–∫–∞ Tinkoff)
 * - body.Items (–∏–Ω–æ–≥–¥–∞ –∫–ª–∞–¥—É—Ç —Å—é–¥–∞)
 * - body.DATA?.Receipt?.Items (–µ—Å–ª–∏ –æ–±—ë—Ä–Ω—É—Ç–æ)
 */
function extractItems(body) {
  const items =
    body?.Receipt?.Items ||
    body?.Items ||
    body?.DATA?.Receipt?.Items ||
    [];
  if (!Array.isArray(items)) return [];

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º: { Name, Price, Quantity, Amount }
  return items
    .map((it) => ({
      Name: String(it?.Name ?? '').trim(),
      Price: Number(it?.Price ?? 0),      // —É Tinkoff —á–∞—â–µ –≤—Å–µ–≥–æ –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      Quantity: Number(it?.Quantity ?? 1),
      Amount: Number(it?.Amount ?? 0),    // —Å—É–º–º–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–æ–±—ã—á–Ω–æ —Ç–æ–∂–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    }))
    .filter((it) => it.Name.length > 0);
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏:
 * - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
 */
function buildItemsText(items) {
  if (!items.length) return '';

  const lines = items.map((it) => {
    const priceRub = (it.Price || 0) / 100;
    const amountRub = (it.Amount || 0) / 100;
    // –ü—Ä–∏–º–µ—Ä: ‚Ä¢ –ë—É–∫–µ—Ç ¬´–ê–º–µ 101¬ª √ó2 ‚Äî 3 000.00 ‚ÇΩ (1 500.00 ‚ÇΩ/—à—Ç)
    return `‚Ä¢ ${escapeMd(it.Name)} √ó${it.Quantity} ‚Äî *${amountRub.toFixed(2)} ‚ÇΩ* (${priceRub.toFixed(2)} ‚ÇΩ/—à—Ç)`;
  });

  const total = items.reduce((acc, it) => acc + (Number(it.Amount) || 0), 0) / 100;

  return (
    `\nüßæ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n` +
    lines.join('\n') +
    `\n\n*–ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:* ${total.toFixed(2)} ‚ÇΩ`
  );
}

// –ù–µ–º–Ω–æ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è markdown –¥–ª—è TG
function escapeMd(s) {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

// ---- handler ----
module.exports = async function tinkoffCallback(req, res) {
  try {
    if (req.method && req.method.toUpperCase() !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    // body –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –º–∏–¥–ª–≤–∞—Ä—å—é
    const body =
      (req.body && Object.keys(req.body).length ? req.body : null) ||
      (await (async () => {
        try {
          return JSON.parse(req.rawBody?.toString?.() || '{}');
        } catch {
          return {};
        }
      })());

    console.log('‚ö° Tinkoff webhook:', JSON.stringify(body));

    // --- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Token ---
    if (TINKOFF_PASSWORD && body && typeof body === 'object') {
      const expected = computeTinkoffToken(body, TINKOFF_PASSWORD);
      const got = (body.Token || '').toString().toUpperCase();
      if (!got || got !== expected) {
        console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Token –æ—Ç Tinkoff. –û–∂–∏–¥–∞–ª–∏:', expected, '–ü–æ–ª—É—á–∏–ª–∏:', got);
        return res.status(200).json({ ok: true, ignored: true, reason: 'bad-token' });
      }
    }

    const status = body?.Status || '';
    const paymentId = body?.PaymentId || body?.OrderId || '';

    // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ PaymentId —É–∂–µ —Å–ª–∞–ª–∏)
    if (paymentId && processed.has(paymentId)) {
      console.log('‚Ü©Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ:', paymentId);
      return res.status(200).json({ ok: true, duplicate: true });
    }

    // –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ç–æ–ª—å–∫–æ CONFIRMED
    if (status !== 'CONFIRMED') {
      console.log(`‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å: ${status}`);
      return res.status(200).json({ ok: true, ignored: true, status });
    }

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    const amountRub = (Number(body?.Amount) || 0) / 100; // —É Tinkoff —Å—É–º–º–∞ –æ–±—ã—á–Ω–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    const customer =
      body?.CustomerKey ||
      body?.Phone ||
      body?.Email ||
      '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const orderId = body?.OrderId || '‚Äî';

    // –ü–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞ (–µ—Å–ª–∏ –≤ webhook –ø—Ä–∏—à–ª–∏)
    const items = extractItems(body);
    const itemsText = buildItemsText(items);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const text =
      `üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n` +
      `üì¶ –ó–∞–∫–∞–∑: *${escapeMd(orderId)}*\n` +
      `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${escapeMd(customer)}\n` +
      `üí∞ –°—É–º–º–∞: *${amountRub.toFixed(2)} ‚ÇΩ*` +
      (paymentId ? `\nüÜî PaymentId: ${escapeMd(String(paymentId))}` : '') +
      `\nüïí ${escapeMd(new Date().toLocaleString('ru-RU'))}` +
      (itemsText || '');

    await sendTelegram(text);

    if (paymentId) processed.add(paymentId);

    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('tinkoff-callback error:', e);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return res.status(200).json({ ok: true, error: 'internal-handled' });
  }
};
