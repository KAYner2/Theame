// api/tinkoff-callback.js  ‚Äî ESM, Vercel
import crypto from 'node:crypto';

// === ENV ===
const TG_TOKEN            = process.env.TG_BOT_TOKEN || '';
const TG_CHAT_ID          = process.env.TELEGRAM_CHAT_ID || '';
const TINKOFF_PASSWORD    = process.env.TINKOFF_TERMINAL_PASSWORD || ''; // –ø–∞—Ä–æ–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ –õ–ö
const IDEMPOTENCY_TTL_SEC = Number(process.env.IDEMPOTENCY_TTL_SEC || 60 * 60 * 24 * 14); // 14 –¥–Ω–µ–π

// --- optional Vercel KV (Upstash) ---
async function getKV() {
  try {
    if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {
      const { kv } = await import('@vercel/kv'); // –Ω–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
      return kv;
    }
  } catch {}
  return null;
}

// --- –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π in-memory fallback –Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞ ---
const memStore = new Map();
function memHas(key) {
  const item = memStore.get(key);
  if (!item) return false;
  if (Date.now() > item.expiresAt) { memStore.delete(key); return false; }
  return true;
}
function memSetNX(key, ttlSec) {
  if (memHas(key)) return false;
  memStore.set(key, { expiresAt: Date.now() + ttlSec * 1000 });
  return true;
}

// === UTILS ===
const toRub = (kop = 0) => (Number(kop) / 100).toFixed(2);

function getItems(body) {
  const items = body?.Receipt?.Items || body?.Items || body?.DATA?.Receipt?.Items || [];
  return Array.isArray(items) ? items : [];
}

async function readBody(req) {
  if (req.body && typeof req.body === 'object') return req.body;
  const chunks = [];
  for await (const chunk of req) chunks.push(chunk);
  const raw = Buffer.concat(chunks).toString('utf8');
  try { return raw ? JSON.parse(raw) : {}; } catch { return {}; }
}

async function sendTG(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) return { ok: false, reason: 'no-env' };
  try {
    const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ chat_id: TG_CHAT_ID, text, disable_web_page_preview: true }),
    });
    const bodyTxt = await r.text().catch(() => '');
    if (!r.ok) return { ok: false, reason: `tg-fail ${r.status}`, body: bodyTxt };
    return { ok: true };
  } catch (e) {
    return { ok: false, reason: 'fetch-error', error: String(e) };
  }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Token (SHA-256 –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –¢-–ë–∞–Ω–∫–∞) ===
// –ê–ª–≥–æ—Ä–∏—Ç–º (—Å–∂–∞—Ç–æ–µ —Ä–µ–∑—é–º–µ –ø–æ –æ—Ñ. –¥–æ–∫–∞–º):
// 1) –ë–µ—Ä—ë–º –≤—Å–µ –ø–æ–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ JSON, —É–±–∏—Ä–∞–µ–º –ø–æ–ª–µ Token, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ Password = TINKOFF_TERMINAL_PASSWORD
// 2) –ü—Ä–∏–≤–æ–¥–∏–º Success –∫ —Å—Ç—Ä–æ–∫–µ 'true'/'false' (–≤–∞–∂–Ω–æ)
// 3) –°–æ—Ä—Ç–∏—Ä—É–µ–º –ö–õ–Æ–ß–ò –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –ó–ù–ê–ß–ï–ù–ò–Ø –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
// 4) –î–µ–ª–∞–µ–º SHA-256 –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º Token (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
function computeTinkoffToken(data, terminalPassword) {
  const payload = { ...data };
  delete payload.Token;
  payload.Password = terminalPassword;

  // –ü—Ä–∏–≤–æ–¥–∏–º Success –∫ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (typeof payload.Success === 'boolean') {
    payload.Success = payload.Success ? 'true' : 'false';
  } else if (payload.Success !== undefined) {
    // –ª—é–±—ã–µ "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ" –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥–∏–º –∫ 'true'/'false'
    payload.Success = String(payload.Success) === 'true' ? 'true' : 'false';
  }

  // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–∏—Ç–∏–≤—ã (–≤ webhook –æ–±—ã—á–Ω–æ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è)
  const keys = Object.keys(payload).sort((a, b) => a.localeCompare(b));
  const concat = keys.map(k => {
    const v = payload[k];
    return typeof v === 'object' ? '' : String(v ?? '');
  }).join('');

  return crypto.createHash('sha256').update(concat).digest('hex');
}

function isFinalStatus(status = '') {
  // –î–ª—è –ø—É—à–∞ –≤ TG –æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–≥–æ CONFIRMED (–æ–¥–Ω–æ-—Å—Ç–∞–¥–∏–π–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Ñ–∏–Ω–∞–ª).
  // –ï—Å–ª–∏ —É —Ç–µ–±—è –¥–≤—É—Ö—Å—Ç–∞–¥–∏–π–Ω–∞—è ‚Äî —Ç–æ–∂–µ –ø—É—à–∏–º —Ç–æ–ª—å–∫–æ CONFIRMED, AUTHORIZED –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ç—å/–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å.
  return String(status).toUpperCase() === 'CONFIRMED';
}

function formatMessage(body) {
  const status    = body?.Status || '‚Äî';
  const orderId   = body?.OrderId || body?.PaymentId || '‚Äî';
  const amountRub = toRub(body?.Amount || 0);
  const customer  = body?.CustomerKey || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

  const items = getItems(body);
  const firstName = items[0]?.Name ? String(items[0].Name) : '';
  const itemsText = items.map(it => {
    const name  = String(it?.Name ?? '').trim();
    const qty   = Number(it?.Quantity ?? 1);
    const price = toRub(it?.Price ?? 0);
    const amt   = toRub(it?.Amount ?? 0);
    return `‚Ä¢ ${name} √ó${qty} ‚Äî ${amt} ‚ÇΩ (${price} ‚ÇΩ/—à—Ç)`;
  }).join('\n');

  return (
`üí≥ –ü–ª–∞—Ç—ë–∂ (T-Bank)

–°—Ç–∞—Ç—É—Å: ${status}
–ó–∞–∫–∞–∑: ${orderId}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}
–°—É–º–º–∞: ${amountRub} ‚ÇΩ${firstName ? `

–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: ${firstName}` : ''}${itemsText ? `

–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
${itemsText}` : ''}`
  );
}

async function setIdempotent(key) {
  // —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º KV —Å NX, –ø–æ—Ç–æ–º in-memory fallback
  const kv = await getKV();
  if (kv) {
    // set NX + EX
    const ok = await kv.set(key, '1', { ex: IDEMPOTENCY_TTL_SEC, nx: true });
    // @vercel/kv –≤–µ—Ä–Ω—ë—Ç null –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ –±—ã–ª
    return ok === 'OK';
  }
  return memSetNX(key, IDEMPOTENCY_TTL_SEC);
}

// === Handler ===
export default async function handler(req, res) {
  try {
    if (req.method === 'GET') {
      const now = new Date().toLocaleString('ru-RU');
      const tg = await sendTG(`‚úÖ –¢–µ—Å—Ç –∏–∑ Vercel (${now})\n–î–æ–º–µ–Ω: ${req.headers.host}`);
      // –û—Ç–≤–µ—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      res.status(200).json({ ok: true, mode: 'GET', tg });
      return;
    }

    if (req.method !== 'POST') {
      res.status(405).json({ ok: false, error: 'Method Not Allowed' });
      return;
    }

    const body = await readBody(req);

    // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if (!TINKOFF_PASSWORD) {
      // –ë–µ–∑ –ø–∞—Ä–æ–ª—è –Ω–µ–ª—å–∑—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ª—É—á—à–µ —è–≤–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±–∞–Ω–∫ —Ä–µ—Ç—Ä–∞–∏–ª, –∞ —Ç—ã —É–≤–∏–¥–µ–ª misconfig
      res.status(500).send('MISSING_TINKOFF_TERMINAL_PASSWORD');
      return;
    }
    const theirToken = String(body?.Token || '').toLowerCase();
    const ourToken   = computeTinkoffToken(body, TINKOFF_PASSWORD).toLowerCase();

    if (!theirToken || theirToken !== ourToken) {
      // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 200, –Ω–æ –ù–ò–ß–ï–ì–û –Ω–µ –¥–µ–ª–∞–µ–º (—á—Ç–æ–±—ã –Ω–µ –¥–¥–æ—Å–∏–ª–∏ TG). –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É.
      res.status(200).send('IGNORED_BAD_TOKEN');
      return;
    }

    // 2) –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –±–∞–Ω–∫—É ‚Äî —á—Ç–æ–±—ã –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª (—É–∂–µ –º–æ–∂–Ω–æ 200 OK)
    // –ù–æ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º ‚Äî —Å—Ç–∞–≤–∏–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π —Ñ–ª–∞–∂–æ–∫ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–µ–∑ await) –ø–æ—à–ª—ë–º –¢–ì, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const status   = String(body?.Status || '');
    const success  = String(body?.Success) === 'true' || body?.Success === true;

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const paymentId = body?.PaymentId || body?.OrderId || 'no-id';
    const eventKey  = `${paymentId}:${status}`; // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–∂–µ—Å—Ç–æ—á–∏—Ç—å (–¥–æ–±–∞–≤–∏—Ç—å Amount –∏ —Ç.–ø.)

    // –†–µ—à–µ–Ω–∏–µ, –ø—É—à–∏–º —Ç–æ–ª—å–∫–æ CONFIRMED –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞
    if (success && isFinalStatus(status)) {
      const isFirstTime = await setIdempotent(eventKey);
      if (isFirstTime) {
        // –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–∞–Ω–∫—É ‚Äî —à–ª—ë–º –¢–ì ¬´–≤ —Ñ–æ–Ω–µ¬ª, –Ω–æ –±–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö —Ç–∞—Å–∫–æ–≤: –ø—Ä–æ—Å—Ç–æ –Ω–µ await
        sendTG(formatMessage(body)).catch(() => {});
      }
    }

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º ¬´OK¬ª ‚Äî –±–∞–Ω–∫ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Ä–µ—Ç—Ä–∞–∏
    res.status(200).send('OK');
  } catch (e) {
    // –ù–∞ –≤–µ–±—Ö—É–∫–∞—Ö –ª—É—á—à–µ –≤—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ –±–æ–º–±–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏; –ø—Ä–∏ —ç—Ç–æ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –æ—à–∏–±–∫—É —É —Å–µ–±—è (–ª–æ–≥/–æ–±—Å–µ—Ä–≤–∞–±–∏–ª–∏—Ç–∏)
    res.status(200).send('HANDLED');
  }
}

// –í ESM-—Ä–µ–∂–∏–º–µ –∫–æ–Ω—Ñ–∏–≥ —Ç–∞–∫:
export const config = {
  api: { bodyParser: true },
};
