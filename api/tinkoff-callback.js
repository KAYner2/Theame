// api/tinkoff-callback.js
// –ú–ï–ì–ê-–ü–†–û–°–¢–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Tinkoff -> Telegram.
// –ù–∏–∫–∞–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Token, –Ω–∏–∫–∞–∫–æ–≥–æ Markdown. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å.

const TG_TOKEN   = process.env.TELEGRAM_BOT_TOKEN;
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –µ—Å–ª–∏ —É —Ç–µ–±—è Node <18 ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
// const fetch = require('node-fetch');

function pickItems(body) {
  const items = body?.Receipt?.Items || body?.Items || body?.DATA?.Receipt?.Items || [];
  if (!Array.isArray(items)) return [];
  return items.map((it) => ({
    name: String(it?.Name ?? '').trim(),
    qty:  Number(it?.Quantity ?? 1),
    price: Number(it?.Price ?? 0),   // –∫–æ–ø–µ–π–∫–∏
    amount: Number(it?.Amount ?? 0), // –∫–æ–ø–µ–π–∫–∏
  })).filter(x => x.name);
}

function rubles(kop = 0) {
  return (Number(kop) / 100).toFixed(2);
}

async function sendTG(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.warn('TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã');
    return;
  }
  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
  await fetch(url, {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({
      chat_id: TG_CHAT_ID,
      text,               // –ë–ï–ó parse_mode ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      disable_web_page_preview: true,
    }),
  }).catch(e => console.error('TG error:', e));
}

function safeParseRaw(req) {
  try {
    const raw = req.rawBody?.toString?.() ?? '';
    return raw ? JSON.parse(raw) : {};
  } catch { return {}; }
}

module.exports = async function handler(req, res) {
  try {
    if (req.method && req.method.toUpperCase() !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    // –±–µ—Ä—ë–º —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π body –∏–ª–∏ –ø—Ä–æ–±—É–µ–º —Å—ã—Ä–æ–µ
    const body =
      (req.body && Object.keys(req.body).length ? req.body : null) ||
      safeParseRaw(req);

    // –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    const status    = body?.Status || '‚Äî';
    const orderId   = body?.OrderId || body?.PaymentId || '‚Äî';
    const amountRub = rubles(body?.Amount || 0);
    const customer  = body?.CustomerKey || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    // –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –∏ —Ç.–¥.)
    const items = pickItems(body);
    const firstItem = items[0]?.name ? items[0].name : ''; // "–Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞"
    const itemsLines = items.map(it =>
      `‚Ä¢ ${it.name} √ó${it.qty} ‚Äî ${rubles(it.amount)} ‚ÇΩ (${rubles(it.price)} ‚ÇΩ/—à—Ç)`
    ).join('\n');

    // –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    let text =
`üü¢ Tinkoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

–°—Ç–∞—Ç—É—Å: ${status}
–ó–∞–∫–∞–∑: ${orderId}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}
–°—É–º–º–∞: ${amountRub} ‚ÇΩ${firstItem ? `

–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: ${firstItem}` : ''}`;

    if (items.length) {
      text += `

–ü–æ–∑–∏—Ü–∏–∏:
${itemsLines}`;
    }

    // —á—É—Ç–æ—á–∫—É –¥–µ–±–∞–≥–∞ –≤ —Ö–≤–æ—Å—Ç (–æ–±—Ä–µ–∑–∞–µ–º –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç)
    const debug = JSON.stringify(body).slice(0, 1500);
    text += `

‚Äî ‚Äî
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—É—Å–µ—á–µ–Ω–æ):
${debug}`;

    await sendTG(text);

    // –í—Å–µ–≥–¥–∞ 200 OK, —á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('webhook error:', e);
    return res.status(200).json({ ok: true, error: 'handled' });
  }
};

// –î–ª—è Vercel –Ω—É–∂–µ–Ω —Å—ã—Ä–æ–π body -> –æ—Ç–∫–ª—é—á–∏–º bodyParser.
module.exports.config = { api: { bodyParser: false } };