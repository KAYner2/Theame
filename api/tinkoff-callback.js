// api/tinkoff-callback.js
// Tinkoff -> Telegram (–∫—Ä–∞—Å–∏–≤–æ, –±–µ–∑ –±–∞–∑—ã).
// –¢—Ä–µ–±—É—é—Ç—Å—è env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Vercel:
//   TG_BOT_TOKEN       ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
//   TELEGRAM_CHAT_ID   ‚Äî id —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 624995887)
//
// GET  /api/tinkoff-callback  ‚Äî —à–ª—ë—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ TG
// POST /api/tinkoff-callback  ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ–±—Ö—É–∫ Tinkoff –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

const TG_TOKEN   = process.env.TG_BOT_TOKEN || '';
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '';

// ---------- utils ----------
const toRub = (kop = 0) => (Number(kop) / 100).toFixed(2);
const nowRu = () => {
  try { return new Date().toLocaleString('ru-RU'); }
  catch { return new Date().toISOString(); }
};

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ Telegram MarkdownV2
function md(s) {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

// –ü–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç —Ç–µ–ª–∞
function pickItems(body) {
  const items = body?.Receipt?.Items || body?.Items || body?.DATA?.Receipt?.Items || [];
  if (!Array.isArray(items)) return [];
  return items.map(it => ({
    name: String(it?.Name ?? '').trim(),
    qty: Number(it?.Quantity ?? 1),
    price_kop: Number(it?.Price ?? 0),
    amount_kop: Number(it?.Amount ?? 0),
  })).filter(x => x.name);
}

function buildItemsText(items) {
  if (!items.length) return '';
  const lines = items.map(it => {
    const price = toRub(it.price_kop);
    const amt   = toRub(it.amount_kop);
    return `‚Ä¢ ${md(it.name)} √ó${it.qty} ‚Äî *${md(amt)} ‚ÇΩ* (${md(price)} ‚ÇΩ/—à—Ç)`;
  }).join('\n');
  const total = toRub(items.reduce((a, it) => a + (it.amount_kop || 0), 0));
  return `\nüßæ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n${lines}\n\n*–ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:* ${md(total)} ‚ÇΩ`;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ JSON —Ç–µ–ª–∞
async function readBody(req) {
  if (req.body && typeof req.body === 'object' && Object.keys(req.body).length) return req.body;
  const chunks = [];
  for await (const chunk of req) chunks.push(chunk);
  const raw = Buffer.concat(chunks).toString('utf8');
  try { return raw ? JSON.parse(raw) : {}; } catch { return {}; }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ª–∏–º–∏—Ç—É 4096
async function sendTG(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.error('‚ùå TG env missing', { haveToken: !!TG_TOKEN, haveChat: !!TG_CHAT_ID });
    return { ok: false, reason: 'no-env' };
  }
  const SAFE = 3800;
  const parts = [];
  if (text.length <= SAFE) parts.push(text);
  else {
    let rest = text;
    while (rest.length) {
      let slice = rest.slice(0, SAFE);
      const lastNL = slice.lastIndexOf('\n');
      if (lastNL > SAFE * 0.6) slice = slice.slice(0, lastNL);
      parts.push(slice);
      rest = rest.slice(slice.length);
    }
  }

  for (const chunk of parts) {
    const r = await fetch(`https://api.telegram.org/bot${TG_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        chat_id: TG_CHAT_ID,
        text: chunk,
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: true,
      }),
    });
    if (!r.ok) {
      const t = await r.text().catch(() => '');
      console.error('TG sendMessage failed:', r.status, r.statusText, t);
      return { ok: false };
    }
  }
  return { ok: true };
}

// ---------- handler ----------
export default async function handler(req, res) {
  try {
    if (req.method === 'GET') {
      await sendTG(`‚úÖ –¢–µ—Å—Ç –∏–∑ Vercel\nüïí ${md(nowRu())}`);
      return res.status(200).json({ ok: true, mode: 'GET-test' });
    }

    if (req.method !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    const body = await readBody(req);

    // –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    const status     = body?.Status || '';
    const orderId    = body?.OrderId || body?.PaymentId || '‚Äî';
    const paymentId  = body?.PaymentId || '';
    const amount_kop = Number(body?.Amount || 0);
    const amount_rub = toRub(amount_kop);
    const customer   = body?.CustomerKey || body?.Name || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const phone      = body?.Phone || null;
    const email      = body?.Email || null;

    // –ü–æ–∑–∏—Ü–∏–∏ / –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞
    const items = pickItems(body);
    const bouquetName = items[0]?.name || '';

    // –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const text =
`üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*
üì¶ –ó–∞–∫–∞–∑: *${md(orderId)}*
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${md(customer)}
${phone ? `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${md(phone)}\n` : ''}${email ? `‚úâÔ∏è Email: ${md(email)}\n` : ''}üí∞ –°—É–º–º–∞: *${md(amount_rub)} ‚ÇΩ*
${paymentId ? `üÜî PaymentId: ${md(paymentId)}\n` : ''}üïí ${md(nowRu())}
${bouquetName ? `\nüåπ *–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:* ${md(bouquetName)}` : ''}${buildItemsText(items)}`;

    await sendTG(text);

    // –í—Å–µ–≥–¥–∞ 200 OK, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('handler error:', e);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî 200
    return res.status(200).json({ ok: true, error: 'handled' });
  }
}

// Vercel –ø—É—Å–∫–∞–π —Å–∞–º –ø–∞—Ä—Å–∏—Ç JSON ‚Äî –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—åfallback.
export const config = {
  api: { bodyParser: true },
};
