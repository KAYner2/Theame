// pages/api/tinkoff-callback.js
import crypto from 'crypto';

function makeToken(fields, password) {
  const clean = {};
  for (const [k, v] of Object.entries(fields)) {
    if (v !== undefined && v !== null && v !== '' && k !== 'Token') {
      clean[k] = String(v);
    }
  }
  clean.Password = password;
  const str = Object.keys(clean).sort().map((k) => clean[k]).join('');
  return crypto.createHash('sha256').update(str).digest('hex');
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;

  console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Tinkoff:', JSON.stringify(body, null, 2));

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const password = process.env.TINKOFF_PASSWORD;
  if (!password) {
    console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω–∞!');
    res.status(500).json({ error: 'Server misconfigured' });
    return;
  }

  const validToken = makeToken(body, password);
  if (body.Token !== validToken) {
    console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Tinkoff!');
    res.status(403).json({ error: 'Invalid token' });
    return;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
  const chatId = 624995887; // —Ç–≤–æ–π chat_id
  const botToken = process.env.TG_BOT_TOKEN;
  if (!botToken) {
    console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!');
    res.status(500).json({ error: 'Bot token not set' });
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const amount = body.Amount ? (body.Amount / 100).toFixed(2) : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  const customer = body.CustomerKey || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const orderId = body.OrderId || '–±–µ–∑ ID';
  const status = body.Status || '–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞';

  const message = `üí≥ *–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞*
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}
üì¶ Order ID: ${orderId}
üí∞ –°—É–º–º–∞: ${amount} ‚ÇΩ
üìú –°—Ç–∞—Ç—É—Å: ${status}
üïí ${new Date().toLocaleString('ru-RU')}`;

  try {
    const resp = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown'
      })
    });

    const tgResp = await resp.json();
    console.log('üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', tgResp);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err);
  }

  res.status(200).json({ ok: true });
}
