// tinkoff-callback.js
// –õ—ë–≥–∫–∏–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Tinkoff –¥–ª—è Vercel/Express.
//
// –î–µ–ª–∞–µ—Ç:
// 1) –í–°–ï–ì–î–ê –æ—Ç–¥–∞—ë—Ç 200 OK (—á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª).
// 2) –í TG —à–ª—ë—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ Status === 'CONFIRMED'.
// 3) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç Token —á–µ—Ä–µ–∑ TINKOFF_TERMINAL_PASSWORD.
// 4) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ PaymentId (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞).
// 5) –í —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å (Receipt.Items / Items / DATA.Receipt.Items).
// 6) –°–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram MarkdownV2 (–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç).

const crypto = require('crypto');

// –ù–∞ Node 18+ fetch –≥–ª–æ–±–∞–ª—å–Ω—ã–π. –ï—Å–ª–∏ —É —Ç–µ–±—è <18 ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
// const fetch = require('node-fetch');

const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TINKOFF_PASSWORD = process.env.TINKOFF_TERMINAL_PASSWORD;

const processed = new Set();
const TG_MAX = 4096; // –ª–∏–º–∏—Ç Telegram –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ; –≤–æ–∑—å–º—ë–º –∑–∞–ø–∞—Å –Ω–∏–∂–µ
const TG_SAFE = 3800;

// ---------- utils ----------
function computeTinkoffToken(body, password) {
  // 1) —É–¥–∞–ª–∏—Ç—å Token; 2) –¥–æ–±–∞–≤–∏—Ç—å Password; 3) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏; 4) —Å–∫–ª–µ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è; 5) SHA256 ‚Üí UPPER
  const data = { ...body };
  delete data.Token;
  data.Password = password;

  const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));
  const concatenated = keys
    .map((k) => {
      const v = data[k];
      return v == null
        ? ''
        : typeof v === 'object'
        ? JSON.stringify(v)
        : String(v);
    })
    .join('');

  const hash = crypto.createHash('sha256').update(concatenated).digest('hex');
  return hash.toUpperCase();
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ MarkdownV2
function escapeMdV2(s) {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

async function sendTelegram(text) {
  if (!TG_TOKEN || !TG_CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ TG');
    return { ok: false, reason: 'no-telegram-env' };
  }

  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;

  // –ë—å—ë–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏
  const parts = [];
  if (text.length <= TG_SAFE) {
    parts.push(text);
  } else {
    let rest = text;
    while (rest.length) {
      let slice = rest.slice(0, TG_SAFE);
      // —Å—Ç–∞—Ä–∞–π—Å—è —Ä–µ–∑–∞—Ç—å –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å—Ç—Ä–æ–∫–∏
      const lastNL = slice.lastIndexOf('\n');
      if (lastNL > TG_SAFE * 0.6) slice = slice.slice(0, lastNL);
      parts.push(slice);
      rest = rest.slice(slice.length);
    }
  }

  for (const chunk of parts) {
    try {
      const res = await fetch(url, {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({
          chat_id: TG_CHAT_ID,
          text: chunk,
          parse_mode: 'MarkdownV2',
          disable_web_page_preview: true,
        }),
      });
      if (!res.ok) {
        const body = await res.text().catch(() => '');
        const msg = `TG sendMessage failed: ${res.status} ${res.statusText} ${body}`;
        console.error(msg);
        return { ok: false, reason: msg };
      }
    } catch (e) {
      console.error('TG fetch error:', e);
      return { ok: false, reason: 'fetch-error' };
    }
  }
  return { ok: true };
}

/**
 * –î–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ç–µ–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 * –ü–æ–Ω–∏–º–∞–µ—Ç:
 * - body.Receipt.Items
 * - body.Items
 * - body.DATA?.Receipt?.Items
 */
function extractItems(body) {
  const items =
    body?.Receipt?.Items ||
    body?.Items ||
    body?.DATA?.Receipt?.Items ||
    [];
  if (!Array.isArray(items)) return [];
  return items
    .map((it) => ({
      Name: String(it?.Name ?? '').trim(),
      Price: Number(it?.Price ?? 0), // –∫–æ–ø–µ–π–∫–∏
      Quantity: Number(it?.Quantity ?? 1),
      Amount: Number(it?.Amount ?? 0), // –∫–æ–ø–µ–π–∫–∏
    }))
    .filter((it) => it.Name.length > 0);
}

function buildItemsText(items) {
  if (!items.length) return '';
  const lines = items.map((it) => {
    const priceRub = (it.Price || 0) / 100;
    const amountRub = (it.Amount || 0) / 100;
    return `‚Ä¢ ${escapeMdV2(it.Name)} √ó${it.Quantity} ‚Äî *${amountRub.toFixed(2)} ‚ÇΩ* (${priceRub.toFixed(2)} ‚ÇΩ/—à—Ç)`;
  });
  const total = items.reduce((acc, it) => acc + (Number(it.Amount) || 0), 0) / 100;
  return `\nüßæ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n${lines.join('\n')}\n\n*–ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:* ${total.toFixed(2)} ‚ÇΩ`;
}

function getNowRu() {
  try {
    return new Date().toLocaleString('ru-RU');
  } catch {
    return new Date().toISOString();
  }
}

// ---------- handler ----------
module.exports = async function tinkoffCallback(req, res) {
  try {
    // CORS preflight (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if (req.method && req.method.toUpperCase() === 'OPTIONS') {
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      return res.status(200).end();
    }

    if (req.method && req.method.toUpperCase() !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
    }

    // –ë–µ—Ä—ë–º —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π body, –ª–∏–±–æ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—ã—Ä–æ–µ
    const body =
      (req.body && Object.keys(req.body).length ? req.body : null) ||
      (await (async () => {
        try {
          // Vercel (Node) –º–æ–∂–µ—Ç –∫–ª–∞—Å—Ç—å —Å—ã—Ä–æ–π –±—É—Ñ–µ—Ä –≤ req.rawBody (–µ—Å–ª–∏ bodyParser –æ—Ç–∫–ª—é—á—ë–Ω)
          const raw = req.rawBody?.toString?.() ?? '';
          return raw ? JSON.parse(raw) : {};
        } catch {
          return {};
        }
      })());

    console.log('‚ö° Tinkoff webhook:', JSON.stringify(body));

    // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Token
    if (TINKOFF_PASSWORD && body && typeof body === 'object') {
      const expected = computeTinkoffToken(body, TINKOFF_PASSWORD);
      const got = (body.Token || '').toString().toUpperCase();
      if (!got || got !== expected) {
        console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Token –æ—Ç Tinkoff. –û–∂–∏–¥–∞–ª–∏:', expected, '–ü–æ–ª—É—á–∏–ª–∏:', got);
        // –û—Ç–≤–µ—á–∞–µ–º 200, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return res.status(200).json({ ok: true, ignored: true, reason: 'bad-token' });
      }
    }

    const status = body?.Status || '';
    const paymentId = body?.PaymentId || body?.OrderId || '';

    // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if (paymentId && processed.has(paymentId)) {
      console.log('‚Ü©Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ:', paymentId);
      return res.status(200).json({ ok: true, duplicate: true });
    }

    // –ò–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ç–æ–ª—å–∫–æ CONFIRMED
    if (status !== 'CONFIRMED') {
      console.log(`‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å: ${status}`);
      return res.status(200).json({ ok: true, ignored: true, status });
    }

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    const amountRub = (Number(body?.Amount) || 0) / 100; // –∫–æ–ø–µ–π–∫–∏ ‚Üí —Ä—É–±–ª–∏
    const customer =
      body?.CustomerKey ||
      body?.Phone ||
      body?.Email ||
      '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const orderId = body?.OrderId || '‚Äî';

    // –ü–æ–∑–∏—Ü–∏–∏
    const items = extractItems(body);
    const itemsText = buildItemsText(items);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (MarkdownV2)
    const text =
      `üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n` +
      `üì¶ –ó–∞–∫–∞–∑: *${escapeMdV2(orderId)}*\n` +
      `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${escapeMdV2(customer)}\n` +
      `üí∞ –°—É–º–º–∞: *${amountRub.toFixed(2)} ‚ÇΩ*` +
      (paymentId ? `\nüÜî PaymentId: ${escapeMdV2(String(paymentId))}` : '') +
      `\nüïí ${escapeMdV2(getNowRu())}` +
      (itemsText || '');

    const tg = await sendTelegram(text);
    if (!tg.ok) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ TG:', tg.reason);
    }

    if (paymentId) processed.add(paymentId);
    return res.status(200).json({ ok: true });
  } catch (e) {
    console.error('tinkoff-callback error:', e);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Tinkoff –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return res.status(200).json({ ok: true, error: 'internal-handled' });
  }
};

// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Vercel (Node.js runtime) –∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å—ã—Ä–æ–µ —Ç–µ–ª–æ,
// –ø–æ–ª–æ–∂–∏ —Ä—è–¥–æ–º (–¥–ª—è API route) —ç–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫:
// module.exports.config = { api: { bodyParser: false } };
