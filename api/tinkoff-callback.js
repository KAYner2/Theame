// api/tinkoff-callback.js
// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è, –≤–∏–¥–∏—Ç –ª–∏ env, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ–ª–µ,
// –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram. –í–°–ï–ì–î–ê 200 –û–ö.

const TG_TOKEN   = process.env.TG_BOT_TOKEN;          // —É —Ç–µ–±—è —É–∂–µ –∑–∞–¥–∞–Ω –Ω–∞ Vercel
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;      // –¥–æ–±–∞–≤—å 624995887 –≤ Vercel

const haveToken = !!TG_TOKEN;
const haveChat  = !!TG_CHAT_ID;
const rub = (kop = 0) => (Number(kop) / 100).toFixed(2);

// –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å body –∫–∞–∫ —É–≥–æ–¥–Ω–æ
function pickBody(req) {
  if (req.body && Object.keys(req.body).length) return req.body;
  try {
    const raw = req.rawBody?.toString?.() || '';
    return raw ? JSON.parse(raw) : {};
  } catch {
    return {};
  }
}

// –ü–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
function getItems(body) {
  const items = body?.Receipt?.Items || body?.Items || body?.DATA?.Receipt?.Items || [];
  return Array.isArray(items) ? items : [];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ TG (–±–µ–∑ Markdown)
async function sendTG(text) {
  if (!haveToken || !haveChat) {
    return { ok: false, error: 'no-env', detail: { haveToken, haveChat } };
  }
  try {
    const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ chat_id: TG_CHAT_ID, text, disable_web_page_preview: true }),
    });
    const respText = await r.text().catch(() => '');
    if (!r.ok) {
      console.error('TG sendMessage failed:', r.status, r.statusText, respText);
      return { ok: false, error: 'tg-fail', status: r.status, body: respText };
    }
    return { ok: true };
  } catch (e) {
    console.error('TG fetch error:', e);
    return { ok: false, error: 'fetch-error', detail: String(e) };
  }
}

module.exports = async function handler(req, res) {
  // –°—Ä–∞–∑—É —Å–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ—É
  const diag = {
    method: req.method,
    url: req.url,
    env: { haveToken, haveChat },        // –Ω–µ —Å–≤–µ—Ç–∏–º —Å–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è
    headers: req.headers,
  };

  try {
    if (req.method === 'GET') {
      const now = new Date().toISOString();
      const tg = await sendTG(`‚úÖ –¢–µ—Å—Ç –∏–∑ Vercel (${now})\n–î–æ–º–µ–Ω: ${req.headers.host}`);
      diag.tg = tg;
      return res.status(200).json({ ok: true, mode: 'GET-test', diag });
    }

    if (req.method !== 'POST') {
      return res.status(405).json({ ok: false, error: 'Method Not Allowed', diag });
    }

    const body = pickBody(req);
    diag.rawSeen = typeof req.rawBody === 'string' ? req.rawBody.slice(0, 2000) : undefined;
    diag.body = body;

    // –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const status    = body?.Status || '‚Äî';
    const orderId   = body?.OrderId || body?.PaymentId || '‚Äî';
    const amountRub = rub(body?.Amount || 0);
    const customer  = body?.CustomerKey || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    // –ü–æ–∑–∏—Ü–∏–∏
    const items = getItems(body);
    const firstName = items[0]?.Name ? String(items[0].Name) : '';
    const itemsLines = items.map(it => {
      const name  = String(it?.Name ?? '').trim();
      const qty   = Number(it?.Quantity ?? 1);
      const price = rub(it?.Price ?? 0);
      const amt   = rub(it?.Amount ?? 0);
      return `‚Ä¢ ${name} √ó${qty} ‚Äî ${amt} ‚ÇΩ (${price} ‚ÇΩ/—à—Ç)`;
    }).join('\n');

    const message =
`üí≥ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ Tinkoff

–°—Ç–∞—Ç—É—Å: ${status}
–ó–∞–∫–∞–∑: ${orderId}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}
–°—É–º–º–∞: ${amountRub} ‚ÇΩ${firstName ? `

–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: ${firstName}` : ''}${itemsLines ? `

–ü–æ–∑–∏—Ü–∏–∏:
${itemsLines}` : ''}`;

    const tg = await sendTG(message);
    diag.tg = tg;

    // –í–°–ï–ì–î–ê 200
    return res.status(200).json({ ok: true, mode: 'POST', diag });
  } catch (e) {
    console.error('webhook error:', e);
    diag.error = String(e);
    return res.status(200).json({ ok: true, error: 'handled', diag });
  }
};

// –ù—É–∂–µ–Ω —Å—ã—Ä–æ–π body –Ω–∞ Vercel –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
module.exports.config = { api: { bodyParser: false } };
