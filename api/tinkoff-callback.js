// api/tinkoff-callback.js ‚Äî ESM, Vercel
import crypto from 'node:crypto';

// ===================== ENV =====================
const TG_TOKEN            = process.env.TG_BOT_TOKEN || '';
const TG_CHAT_ID_RAW      = process.env.TELEGRAM_CHAT_ID || ''; // –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
const TINKOFF_PASSWORD    = process.env.TINKOFF_PASSWORD || ''; // –ø–∞—Ä–æ–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ –õ–ö
const IDEMPOTENCY_TTL_SEC = Number(process.env.IDEMPOTENCY_TTL_SEC || 60 * 60 * 24 * 14); // 14 –¥–Ω–µ–π
const PUSH_AUTH           = String(process.env.PUSH_AUTH || 'false') === 'true';
const DRY_RUN             = String(process.env.DRY_RUN || 'false') === 'true';

// === DEBUG (–≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏!) ===
const DEBUG_WEBHOOK       = String(process.env.DEBUG_WEBHOOK || 'false') === 'true';       // —Å–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –ö–ê–ñ–î–û–ú–£ POST (–¥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫)
const DEBUG_TRUST_BAD_TOKEN = String(process.env.DEBUG_TRUST_BAD_TOKEN || 'false') === 'true'; // —Å–ª–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ–≤–µ—Ä–Ω–∞—è (–û–ü–ê–°–ù–û!)

// —Ä–∞—Å–ø–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
const TG_CHAT_IDS = TG_CHAT_ID_RAW.split(',').map(s => s.trim()).filter(Boolean);

// ================== Vercel KV (Upstash) ==================
async function getKV() {
  try {
    if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {
      const { kv } = await import('@vercel/kv'); // –¥–æ–±–∞–≤—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ package.json
      return kv;
    }
  } catch {}
  return null;
}

// === –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π in-memory fallback –Ω–∞ –∂–∏–∑–Ω—å –∏–Ω—Å—Ç–∞–Ω—Å–∞ ===
const memStore = new Map();
function memHas(key) {
  const item = memStore.get(key);
  if (!item) return false;
  if (Date.now() > item.expiresAt) { memStore.delete(key); return false; }
  return true;
}
function memSetNX(key, ttlSec) {
  if (memHas(key)) return false;
  memStore.set(key, { expiresAt: Date.now() + ttlSec * 1000 });
  return true;
}

// ===================== UTILS =====================
const toRub = (kop = 0) => (Number(kop) / 100).toFixed(2);

function getItems(body) {
  const items = body?.Receipt?.Items || body?.Items || body?.DATA?.Receipt?.Items || [];
  return Array.isArray(items) ? items : [];
}

// —á–∏—Ç–∞–µ–º JSON –∏–ª–∏ x-www-form-urlencoded
async function readBody(req) {
  if (req.body && typeof req.body === 'object') return req.body;

  const chunks = [];
  for await (const chunk of req) chunks.push(chunk);
  const raw = Buffer.concat(chunks).toString('utf8');

  const ct = String(req.headers['content-type'] || '').toLowerCase();

  if (ct.includes('application/x-www-form-urlencoded')) {
    try {
      const params = new URLSearchParams(raw);
      const obj = Object.fromEntries(params.entries());
      if (obj.Amount != null && !Number.isNaN(Number(obj.Amount))) obj.Amount = Number(obj.Amount);
      return obj;
    } catch { return {}; }
  }

  try { return raw ? JSON.parse(raw) : {}; } catch { return {}; }
}

// ‚Äî TG c —Ç–∞–π–º–∞—É—Ç–æ–º, 1 —Ä–µ—Ç—Ä–∞–µ–º –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ chat_id
async function sendTG(text) {
  if (!TG_TOKEN || TG_CHAT_IDS.length === 0) return { ok: false, reason: 'no-env-or-chat' };
  const url = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;

  async function doSend(chat_id, signal) {
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ chat_id, text, disable_web_page_preview: true }),
      signal,
    });
    const bodyTxt = await r.text().catch(() => '');
    return { chat_id, ok: r.ok, status: r.status, body: bodyTxt };
  }

  const results = [];
  for (const chatId of TG_CHAT_IDS) {
    try {
      const ac = new AbortController();
      const t = setTimeout(() => ac.abort('timeout'), 8000);
      let res = await doSend(chatId, ac.signal);
      clearTimeout(t);
      if (!res.ok) {
        const ac2 = new AbortController();
        const t2 = setTimeout(() => ac2.abort('timeout'), 8000);
        res = await doSend(chatId, ac2.signal);
        clearTimeout(t2);
      }
      results.push(res);
    } catch (e) {
      results.push({ chat_id: chatId, ok: false, error: String(e) });
    }
  }
  return results;
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Tinkoff (SHA-256) ===
function computeTinkoffToken(data, terminalPassword) {
  const payload = { ...data };
  delete payload.Token;
  payload.Password = terminalPassword;

  // Success -> 'true' / 'false'
  if (typeof payload.Success === 'boolean') {
    payload.Success = payload.Success ? 'true' : 'false';
  } else if (payload.Success !== undefined) {
    payload.Success = String(payload.Success) === 'true' ? 'true' : 'false';
  }

  // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const keys = Object.keys(payload).sort((a, b) => a.localeCompare(b));
  const concat = keys.map(k => {
    const v = payload[k];
    return (v === null || typeof v !== 'object') ? String(v ?? '') : '';
  }).join('');

  return crypto.createHash('sha256').update(concat).digest('hex');
}

function isFinalStatus(status = '') {
  return String(status).toUpperCase() === 'CONFIRMED';
}
function isAuthStatus(status = '') {
  return String(status).toUpperCase() === 'AUTHORIZED';
}

function formatMessage(body) {
  const status    = body?.Status || '‚Äî';
  const orderId   = body?.OrderId || body?.PaymentId || '‚Äî';
  const amountRub = toRub(body?.Amount || 0);
  const customer  = body?.CustomerKey || body?.Phone || body?.Email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

  const items = getItems(body);
  const firstName = items[0]?.Name ? String(items[0].Name) : '';
  const itemsText = items.map(it => {
    const name  = String(it?.Name ?? '').trim();
    const qty   = Number(it?.Quantity ?? 1);
    const price = toRub(it?.Price ?? 0);
    const amt   = toRub(it?.Amount ?? 0);
    return `‚Ä¢ ${name} √ó${qty} ‚Äî ${amt} ‚ÇΩ (${price} ‚ÇΩ/—à—Ç)`;
  }).join('\n');

  return (
`üí≥ –ü–ª–∞—Ç—ë–∂ (T-Bank)

–°—Ç–∞—Ç—É—Å: ${status}
–ó–∞–∫–∞–∑: ${orderId}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${customer}
–°—É–º–º–∞: ${amountRub} ‚ÇΩ${firstName ? `

–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: ${firstName}` : ''}${itemsText ? `

–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
${itemsText}` : ''}`
  );
}

async function setIdempotentOncePerPayment(paymentId) {
  const key = `tinkoff:${paymentId}`; // –æ–¥–∏–Ω –∫–ª—é—á –Ω–∞ –≤–µ—Å—å –ø–ª–∞—Ç—ë–∂
  const kv = await getKV();
  if (kv) {
    const ok = await kv.set(key, '1', { ex: IDEMPOTENCY_TTL_SEC, nx: true });
    return ok === 'OK';
  }
  return memSetNX(key, IDEMPOTENCY_TTL_SEC);
}

// ===================== HANDLER =====================
export default async function handler(req, res) {
  try {
    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä—É–∫–∞–º–∏:
    if (req.method === 'GET') {
      const now = new Date().toLocaleString('ru-RU');
      const text = `‚úÖ –¢–µ—Å—Ç –∏–∑ Vercel (${now})
–î–æ–º–µ–Ω: ${req.headers.host}
DRY_RUN=${DRY_RUN}
CHAT_IDS=${TG_CHAT_IDS.join(',') || '‚Äî'}`;
      const tg = DRY_RUN ? [{ ok: true, dry_run: true }] : await sendTG(text);
      res.status(200).json({ ok: true, mode: 'GET', tg });
      return;
    }

    if (req.method !== 'POST') {
      res.status(405).json({ ok: false, error: 'Method Not Allowed' });
      return;
    }

    const body = await readBody(req);

    // === DEBUG: —à–ª—ë–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ –ª—é–±–æ–º –≤—Ö–æ–¥—è—â–µ–º POST ===
    if (DEBUG_WEBHOOK) {
      const dbg = `üêû DEBUG Tinkoff Webhook
IP: ${req.headers['x-real-ip'] || req.headers['x-forwarded-for'] || '‚Äî'}
CT: ${req.headers['content-type'] || '‚Äî'}
Status: ${body?.Status || '‚Äî'}, Success: ${body?.Success}
PaymentId: ${body?.PaymentId || '‚Äî'}
OrderId: ${body?.OrderId || '‚Äî'}
Amount: ${toRub(body?.Amount || 0)} ‚ÇΩ`;
      if (!DRY_RUN) sendTG(dbg).catch(()=>{});
      console.log('[DEBUG_WEBHOOK] ', dbg);
    }

    // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–æ–ª—è (–≤—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª)
    if (!TINKOFF_PASSWORD) {
      console.warn('[tinkoff] missing TINKOFF_PASSWORD env');
      res.status(200).send('MISSING_TINKOFF_PASSWORD');
      return;
    }

    // 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    const theirToken = String(body?.Token || '').toLowerCase();
    const ourToken   = computeTinkoffToken(body, TINKOFF_PASSWORD).toLowerCase();
    const tokenMatch = !!theirToken && theirToken === ourToken;

    if (!tokenMatch && !DEBUG_TRUST_BAD_TOKEN) {
      console.warn('[tinkoff] bad token, ignore', { theirTokenLen: theirToken?.length || 0 });
      res.status(200).send('IGNORED_BAD_TOKEN');
      return;
    }

    // 3) –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—Ç–∞—Ç—É—Å
    const paymentId = body?.PaymentId || body?.OrderId || null;
    const status    = String(body?.Status || '');
    const success   = String(body?.Success) === 'true' || body?.Success === true;

    if (!paymentId) {
      console.warn('[tinkoff] no payment id ‚Äî skip TG');
      res.status(200).send('IGNORED_NO_PAYMENT_ID');
      return;
    }

    // 4) –ö–æ–≥–¥–∞ –ø—É—à–∏–º
    const shouldPush =
      (success && isFinalStatus(status)) ||
      (PUSH_AUTH && isAuthStatus(status)) ||
      (DEBUG_TRUST_BAD_TOKEN && !tokenMatch); // –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º ¬´–¥–æ–≤–µ—Ä—è—Ç—å¬ª ‚Äî –ø—É—à–∏–º –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è

    if (shouldPush) {
      const first = await setIdempotentOncePerPayment(paymentId);
      if (first || DEBUG_TRUST_BAD_TOKEN) {
        const msg = formatMessage(body) + (!tokenMatch ? `

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–ª–∞ (DEBUG_TRUST_BAD_TOKEN).` : '');
        if (DRY_RUN) {
          console.log('[tinkoff][dry-run] TG message:\n' + msg);
        } else {
          sendTG(msg).catch(err => console.error('[tinkoff] tg send error', err));
        }
      }
    }

    // 5) –í—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–π OK –±–∞–Ω–∫—É
    res.status(200).send('OK');
  } catch (e) {
    console.error('[tinkoff] handler error', e);
    // –í—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    res.status(200).send('HANDLED');
  }
}

// –í ESM-—Ä–µ–∂–∏–º–µ –∫–æ–Ω—Ñ–∏–≥ —Ç–∞–∫–æ–π:
export const config = {
  api: { bodyParser: true },
};
